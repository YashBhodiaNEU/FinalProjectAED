/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package userinterface.SessionManager;

import Business.AEFIManager.AEFIManagerDirectory;
import Business.AppointmentBooking.BookAppointment;
import Business.Beneficiary.BeneficiaryDirectory;
import Business.ColdChainSupplier.ColdChainSupplierDirectory;
import Business.EcoSystem;
import Business.FederalGovernment.FederalGovernmentDirectory;
import Business.SessionManagers.SessionManagerDirectory;
import Business.StateGovernment.StateGovernmentDirectory;
import Business.UserAccount.UserAccount;
import Business.VaccinationCenter.VaccinationCenterDirectory;
import Business.VaccinationSession.VaccinationSessionDirectory;
import Business.Vaccinator.VaccinatorDirectory;
import Business.VaccineManufacturer.VaccineManufacturerDirectory;
import java.awt.CardLayout;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author yashb
 */
public class SessionManagerWorkArea extends javax.swing.JPanel {

    /**
     * Creates new form SessionManagerWorkArea
     */
    JPanel userProcessContainer;
    EcoSystem ecosystem; 
    UserAccount userAccount;
    public SessionManagerWorkArea(JPanel userProcessContainer, UserAccount account, EcoSystem ecosystem, VaccineManufacturerDirectory vaccineManufacturerDirectory, FederalGovernmentDirectory federalGovernmentDirectory, StateGovernmentDirectory stateGovernmentDirectory, ColdChainSupplierDirectory coldChainSupplierDirectory, VaccinationCenterDirectory vaccinationCenterDirectory, SessionManagerDirectory sessionManagerDirectory, AEFIManagerDirectory aefiManagerDirectory, VaccinatorDirectory vaccinatorDirectory, VaccinationSessionDirectory vaccinationSessionDirectory, BeneficiaryDirectory beneficiaryDirectory) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.ecosystem = ecosystem;
        this.userAccount = account;
        populateAppointmentTable();
        populateFitForVaccineAdministrationTable();
        populateVaccinatedTable();
        populateAEFITable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    public void populateAppointmentTable(){
        DefaultTableModel dtm = (DefaultTableModel) tblAppointment.getModel();
        dtm.setRowCount(0);
        for (BookAppointment ba : ecosystem.getAppointmentDirectory().getAppointmentDirectory()){
            if(userAccount.getEmployee().getName().equalsIgnoreCase(ba.getVaccinationSession().getSessionManager()) && ba.getAppointmentStatus().toString().equalsIgnoreCase("Appointment Booked")){
                 Object [] row = new Object[5];
                 row[0] = ba;
                 row[1] = ba.getBeneficiary().getBeneficiaryName();
                 row[2] = ba.getVaccinationSession().getSessionName();
                 row[3] = ba.getDoseNumber();
                 row[4] = ba.getAppointmentStatus();
                 dtm.addRow(row);
            }
        }
    }
    public void populateFitForVaccineAdministrationTable(){
        DefaultTableModel dtm = (DefaultTableModel) tblAppointmentFit.getModel();
        dtm.setRowCount(0);
        for (BookAppointment ba : ecosystem.getAppointmentDirectory().getAppointmentDirectory()){
            if(userAccount.getEmployee().getName().equalsIgnoreCase(ba.getVaccinationSession().getSessionManager()) && ba.getAppointmentStatus().toString().equalsIgnoreCase("Vital Sign checked")){
                 Object [] row = new Object[5];
                 row[0] = ba;
                 row[1] = ba.getBeneficiary().getBeneficiaryName();
                 row[2] = ba.getVaccinationSession().getSessionName();
                 row[3] = ba.getDoseNumber();
                 row[4] = ba.getAppointmentStatus();
                 dtm.addRow(row);
            }
        }
    }
        
    public void populateVaccinatedTable(){
        DefaultTableModel dtm = (DefaultTableModel) tblVaccinated.getModel();
        dtm.setRowCount(0);
        for (BookAppointment ba : ecosystem.getAppointmentDirectory().getAppointmentDirectory()){
            if(userAccount.getEmployee().getName().equalsIgnoreCase(ba.getVaccinationSession().getSessionManager()) && (ba.getAppointmentStatus().toString().equalsIgnoreCase("Partially Vaccinated") || ba.getAppointmentStatus().toString().equalsIgnoreCase("Fully Vaccinated"))){
                 Object [] row = new Object[5];
                 row[0] = ba;
                 row[1] = ba.getBeneficiary().getBeneficiaryName();
                 row[2] = ba.getVaccinationSession().getSessionName();
                 row[3] = ba.getDoseNumber();
                 row[4] = ba.getAppointmentStatus();
                 dtm.addRow(row);
            }
        }
    }
    public void populateAEFITable(){
        DefaultTableModel dtm = (DefaultTableModel) tblAEFIs.getModel();
        dtm.setRowCount(0);
        for (BookAppointment ba : ecosystem.getAppointmentDirectory().getAppointmentDirectory()){
            if(userAccount.getEmployee().getName().equalsIgnoreCase(ba.getVaccinationSession().getSessionManager()) && (ba.getAppointmentStatus().toString().equalsIgnoreCase("AEFI Event")) || (ba.getAppointmentStatus().toString().equalsIgnoreCase("AEFI resolved"))){
                 Object [] row = new Object[5];
                 row[0] = ba;
                 row[1] = ba.getBeneficiary().getBeneficiaryName();
                 row[2] = ba.getVaccinationSession().getSessionName();
                 row[3] = ba.getDoseNumber();
                 row[4] = ba.getAppointmentStatus();
                 dtm.addRow(row);
            }
        }
    }
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblAppointment = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        btnFitForAdministration = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblAppointmentFit = new javax.swing.JTable();
        btnBack = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblVaccinated = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        btnReportAEFI = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        tblAEFIs = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        btnRestoreStatus = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 255, 255));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Session Manager Work Area");

        tblAppointment.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Appointment ID", "Beneficiary", "Session", "Dose", "Status"
            }
        ));
        jScrollPane2.setViewportView(tblAppointment);

        jLabel2.setText("Appointment List");

        btnFitForAdministration.setText("Fit For Vaccine Administration");
        btnFitForAdministration.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFitForAdministrationActionPerformed(evt);
            }
        });

        tblAppointmentFit.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Appointment ID", "Beneficiary", "Session", "Dose", "Status"
            }
        ));
        jScrollPane3.setViewportView(tblAppointmentFit);

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        tblVaccinated.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Appointment ID", "Beneficiary", "Session", "Dose", "Status"
            }
        ));
        jScrollPane5.setViewportView(tblVaccinated);

        jLabel3.setText("Beneficiaries Vaccinated");

        btnReportAEFI.setText("Report AEFI");
        btnReportAEFI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReportAEFIActionPerformed(evt);
            }
        });

        tblAEFIs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Appointment ID", "Beneficiary", "Session", "Dose", "Status"
            }
        ));
        jScrollPane6.setViewportView(tblAEFIs);

        jLabel4.setText("AEFI Reported");

        btnRestoreStatus.setText("Restore Vaccination Status");
        btnRestoreStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRestoreStatusActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane5)
                    .addComponent(jScrollPane6)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnBack)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2)
                                .addGap(124, 124, 124)
                                .addComponent(jLabel1))
                            .addComponent(btnFitForAdministration))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnReportAEFI, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(211, 211, 211)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 220, Short.MAX_VALUE)
                        .addComponent(btnRestoreStatus)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(331, 331, 331)
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(btnBack)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnFitForAdministration)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnReportAEFI)
                    .addComponent(btnRestoreStatus)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(65, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnFitForAdministrationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFitForAdministrationActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblAppointment.getSelectedRow();
        BookAppointment ba = (BookAppointment)tblAppointment.getValueAt(selectedRow, 0);
        String status = "Vital Sign checked";
        ba.setAppointmentStatus(status);
        populateFitForVaccineAdministrationTable();
        populateAppointmentTable();
    }//GEN-LAST:event_btnFitForAdministrationActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnReportAEFIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReportAEFIActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblVaccinated.getSelectedRow();
        BookAppointment ba = (BookAppointment)tblVaccinated.getValueAt(selectedRow, 0);
        String status = "AEFI Event";
        ba.setAppointmentStatus(status);
        populateAEFITable();
    }//GEN-LAST:event_btnReportAEFIActionPerformed

    private void btnRestoreStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRestoreStatusActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblAEFIs.getSelectedRow();
        BookAppointment ba = (BookAppointment)tblAEFIs.getValueAt(selectedRow, 0);
        if(ba.getDoseNumber() == 1){
            String status = "Partially Vaccinated";
            ba.setAppointmentStatus(status);
        }
        else if(ba.getDoseNumber() == 2){
            String status = "Fully Vaccinated";
            ba.setAppointmentStatus(status);
        }
        populateVaccinatedTable();
        populateAEFITable();
        
    }//GEN-LAST:event_btnRestoreStatusActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnFitForAdministration;
    private javax.swing.JButton btnReportAEFI;
    private javax.swing.JButton btnRestoreStatus;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTable tblAEFIs;
    private javax.swing.JTable tblAppointment;
    private javax.swing.JTable tblAppointmentFit;
    private javax.swing.JTable tblVaccinated;
    // End of variables declaration//GEN-END:variables
}
